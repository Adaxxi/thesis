Abstract
Semantic matching, which aims to determine the matching degree between two texts, is a fundamen- tal problem for many NLP applications. Recently, deep learning approach has been applied to this problem and significant improvements have been achieved. In this paper, we propose to view the generation of the global interaction between two texts as a recursive process: i.e. the interaction of two texts at each position is a composition of the interactions between their prefixes as well as the word level interaction at the current position. Based on this idea, we propose a novel deep architec- ture, namely Match-SRNN, to model the recursive matching structure. Firstly, a tensor is constructed to capture the word level interactions. Then a spa- tial RNN is applied to integrate the local interac- tions recursively, with importance determined by four types of gates. Finally, the matching score is calculated based on the global interaction. We show that, after degenerated to the exact match- ing scenario, Match-SRNN can approximate the dynamic programming process of longest common subsequence. Thus, there exists a clear interpre- tation for Match-SRNN. Our experiments on two semantic matching tasks showed the effectiveness of Match-SRNN, and its ability of visualizing the learned matching structure.

1 Introduction
Semantic matching is a critical task for many applications in natural language processing, including information retrieval, question answering and paraphrase identification [Li and Xu, 2013]. The target of semantic matching is to determine a matching score for two given texts. Taking the task of ques- tion answering as an example, given a pair of question and an- swer, a matching function is created to determine the match- ing degree between these two texts. Traditional methods such as BM25 and feature based learning models usually rely on exact matching patterns to determine the degree, and thus suf- fer from the vocabulary mismatching problem [Li and Xu, 2013].
Recently, deep learning approach has been applied to this area and well tackled the vocabulary mismatching problem. Some existing work focus on representing each text as one or several dense vectors, and then calculate the matching score based on the similarity between these vectors. Exam- ples include RAE [Socher et al., 2011], DSSM [Huang et al., 2013], CDSSM [Shen et al., 2014], ARC-I [Hu et al., 2014], CNTN [Qiu and Huang, 2015], LSTM-RNN [Palangi et al., 2015], MultiGranCNN [Yin and Schu ̈tze, 2015a; Yin and Schu ̈tze, 2015b] and MV-LSTM [Wan et al., 2016]. However, it is usually difficult for these methods to model the complicated interaction relationship between two texts [Lu and Li, 2013] because the representations are calculated inde- pendently. To address the problem, some other deep methods have been proposed to directly learn the interaction relation- ship between the two texts, including DeepMatch [Lu and Li, 2013], ARC-II [Hu et al., 2014], and MatchPyramid [Pang et al., 2016] etc. All these models conducts the matching through a hierarchical matching structure: the global inter- action between two texts is a composition of different levels of the local interactions, such as word level and phrase level interactions.
In all of these methods, the mechanism on the generation of the complicated interaction relationship between two texts is not clear, and thus lack of interpretability. In this pa- per, we propose to tackle the problem in a recursive man- ner. Specifically, we view the generation of the global in- teractions as a recursive process. Given two texts S1 = {w1,w2,··· ,wm} and S2 = {v1,v2,··· ,vn}, the interac- tion at each position (i,j) (i.e. interaction between S1[1:i] and S2[1:j]) is a composition of the interactions between their prefixes (i.e. three interactions, S1 [1:i−1]∼S2 [1:j ], S1 [1:i]∼S2 [1:j −1], S1 [1:i−1]∼S2 [1:j −1]), and the word level interaction at this position (i.e. the interaction between wi and vj ), where S [1:c] stands for the prefix consisting of the previous c words of text S. Compared with previous hier- archical matching structure, the recursive matching structure can not only capture the interactions between nearby words, but also take the long distant interactions into account.
Based on the above idea, we propose a novel deep architecture, namely Match-SRNN, to model the recursive matching structure. Firstly, a similarity tensor is constructed to capture the word level interactions between two texts, where each el- ement ⃗sij stands for a similarity vector between two words from different texts. Then a spatial (2D) recurrent neural net- work (spatial RNN) with gated recurrent units is applied to the tensor. Specifically, the representation at each position ⃗hij can be viewed as the interactions between the two pre- fixes, i.e. S1[1:i] and S2[1:j]. It is determined by four factors:
⃗hi−1,j,⃗hi,j−1,⃗hi−1,j−1 and the input word level interaction ⃗sij, depending on the corresponding gates, zt,zl,zd, and zi, respectively. Finally, the matching score is produced by a linear scoring function on the representation of the global in- teraction ⃗hmn, obtained by the aforementioned spatial RNN.
We show that Match-SRNN can well approximate the dy- namic programming process of longest common subsequence (LCS) problem [Wikipedia, -]. Furthermore, our simulation experiments show that a clear matching path can be obtained by backtracking the maximum gates at each position, similar to that in LCS. Thus, there is a clear interpretation on how the global interaction is generated in Match-SRNN.
We conducted experiments on question answering and pa- per citation tasks to evaluate the effectiveness of our model. The experimental results showed that Match-SRNN can sig- nificantly outperform existing deep models. Moreover, to vi- sualize the learned matching structure, we showed the match- ing path of two texts sampled from the real data.
The contributions of this paper can be summarized as:
The idea of modeling the mechanism of semanticmatching recursively, i.e. the recursive matching structure.
The proposal of a new deep architecture, namely Match-SRNN, to model the recursive matching structure. Experimental results showed that Match-SRNN can significantly improve the performances of semantic matching, compared with existing deep models.
The reveal of the relationship between Match-SRNN and the LCS, i.e. Match-SRNN can reproduce the matching path of LCS in an exact matching scenario.

2 Related Work
Existing deep learning methods for semantic matching can be categorized into two groups.
One paradigm focuses on representing each text to a dense vector, and then compute the matching score based on the similarity between these two vectors. For example, DSSM [Huang et al., 2013] uses a multi-layer fully connected neural network to encode a query (or a document) as a vec- tor. CDSSM [Shen et al., 2014] and ARC-I [Hu et al., 2014] utilize convolutional neural network (CNN), while LSTM- RNN [Palangi et al., 2015] adopts recurrent neural network with long short term memory (LSTM) units to better rep- resent a sentence. Different from above work, CNTN [Qiu and Huang, 2015] uses a neural tensor network to model the interaction between two sentences instead of using the cosine function. With this way, it can capture more com- plex matching relations. Some methods even try to match two sentences with multiple representations, such as words, phrases, and sentences level representations. Examples in- clude RAE [Socher et al., 2011], BiCNN [Yin and Schu ̈tze, 2015a],MultiGranCNN[YinandSchu ̈tze,2015b],andMV- LSTM [Wan et al., 2016]. In general, the idea behind the approach is consistent with users’ experience that the match- ing degree between two sentences can be determined once the meanings of them being well captured. However, it is usually difficult for these methods to model the complicated inter- action relationship between two texts, especially when they have already been represented as a compact vector [Lu and Li, 2013; Bahdanau et al., 2014].
The other paradigm turns to directly model the interaction relationship of two texts. Specifically, the interaction is rep- resented as a dense vector, and then the matching score can be produced by integrating such interaction. Most existing work of this paradigm create a hierarchical matching struc- ture, i.e. the global interaction between two texts is generated by compositing the local interactions hierarchically. For ex- ample, DeepMatch [Lu and Li, 2013] models the generation of the global interaction between two texts as integrating local interactions based on hierarchies of the topics. MatchPyra- mid [Pang et al., 2016] uses a CNN to model the generation of the global interaction as an abstraction of the word level and phrase level interactions. Defining the matching struc- ture hierarchically has limitations, since hierarchical match- ing structure usually relies on a fixed window size for com- position, the long distant dependency between the local inter- actions cannot be well captured in this kind of models.

3 The Recursive Matching Structure
In all existing methods, the mechanism of semantic matching is complicated and hard to interpret. In mathematics and com- puter science, when facing a complicated object, a common method of simplification is to divide a problem into subprob- lems of the same type, and try to solve the problems recur- sively. This is the well-known thinking of recursion. In this paper, we propose to tackle the semantic matching problem recursively. The recursive rule is defined as follows.
Definition 1 (Recursive Matching Structure) Given two texts S1={w1,··· ,wm} and S2={v1,··· ,vn}, the in- teraction between prefixes S1[1:i]={w1, · · · , wi} and
S2[1:j]={v1, · · · , vj } (denoted as ⃗hij ) is composited by the interactions between the sub-prefixes as well as the word level interaction of the current position, as shown by the following equation:
⃗hij = f(⃗hi−1,j,⃗hi,j−1,⃗hi−1,j−1,⃗s(wi,vj)), (1) where ⃗s(wi , vj ) stands for the interaction between words wi
andvj.


structure for sentences S1={The cat sat on the mat} S2={The dog played balls on the floor}. Consider-
ing
and
ing the interaction between S1[1:3]={The cat sat} and
S2[1:4]={The dog played balls} (i.e. ⃗h34), the recursive matching structure defined above indicates that it is the com- position of the interactions between their prefixes (i.e. ⃗h24, ⃗h33, and ⃗h23) and the word level interaction between ‘sat’ and ‘balls’, where ⃗h24 stands for the interaction between
S1[1:2]={Thecat}andS2[1:4]={Thedogplayedballs},⃗h33
