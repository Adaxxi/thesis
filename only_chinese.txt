                设置该选项为空是为了不让目录中显示页码中文译文             单独从  开始编页码中文译文中文译文    用于将章节号添加到页眉中中文译文摘要语义匹配是许多自然语言处理应用的一个基本问题 它的目标在确定两个文本之间的匹配程度。近年来 对这一问题采用了深入的学习方法 并取得了显著的改进。在本文中 我们建议将两个文本之间的全局交互的生成看作一个递归过程 即两个文本在每个位置的相互作用是它们的前缀之间相互作用的组合 以及词级交互当前位置。基于这个思想 我们提出了一种新的深结构 即 模型的递归匹配结构。首先 构造张量来捕获单词级的相互作用。然后利用空间  递归的方式将局部相互作用结合起来 以四种类型的门为重要。最后 在全局交互的基础上计算匹配分数。我们表明 在退化到精确匹配的情况下  可以逼近最长常见子序列的动态规划过程。因此 对  有一个明确的解释。我们对两个语义匹配任务的实验表明了 的有效性 以及它对所学匹配结构的可视化能力。介绍语义匹配是自然语言处理中许多应用的关键任务 包括信息检索、问答和释义识别。语义匹配的目标是确定两个给定文本的匹配评分。以问题回答的任务为例 给出一对问题和答案 建立匹配函数 确定这两种文本之间的匹配度。传统的方法 如  和基于特征的学习模式通常依赖于精确匹配模式来确定程度 从而遭受词汇不匹配问题。近年来 深入学习的方法已经应用到这一领域 并解决了词汇失配问题。现有的一些工作侧重于将每个文本表示为一个或多个稠密向量 然后根据这些向量之间的相似性计算匹配分数。比如包括、、、、、、 和 。然而 这些方法通常很难对两个  的复杂交互关系进行建模 独立地计算表示形式。为了解决这一问题 提出了一些深层次的方法来直接学习两种文本之间的交互关系 包括 、 和 等。所有这些模型都通过分层匹配结构进行匹配 两个文本之间的全局交互是不同级别的局部交互的组合 如单词级别和短语级交互。在所有这些方法中，两种文本之间复杂互动关系产生的机制尚不明确，因此缺乏可解释性。在本文中，我们建议以递归方式解决问题。具体而言，我们将全局交互的生成视为递归过程。给定两个文本 和，每个位置的交互作用  （即和   ：  之间的交互作用）前缀（即三次交互，     ） ，以及在这个位置的字级交互（即  和  之间的交互），其中表示由前  字文本组成的前缀。与以前的层次匹配结构相比，递归匹配结构不仅可以捕获邻近词汇之间的相互作用，还可以考虑远距离的相互作用。基于上述思想，我们提出了一种新颖的深层架构，即来对递归匹配结构进行建模。首先，构造一个相似度张量来捕捉两个文本之间的单词级别的相互作用，其中每个元素表示来自不同文本的两个单词之间的相似性向量。然后将具有门控循环单元的空间（）递归神经网络（空间）应用于张量。具体而言，每个位置     的表示可以被看作两个前缀之间的交互作用，即   ：  和    ：  。它由四个因素决定：    ，，   ，，   ，  和输入字级交互     ，分别取决于相应的门 ，， 和  。最后，由上述空间获得的全局交互     表示的线性评分函数产生匹配分数。我们证明可以很好地逼近最长公共子序列（）问题的动态规划过程。 此外，我们的仿真实验表明，通过回溯每个位置处的最大的门可以获得清晰的匹配路径，类似于中的最长公共子序列。 因此，关于中如何生成全局交互的清晰解释。我们对问题回答和论文引用任务进行了实验，以评估我们模型的有效性。实验结果表明  能显著优于现有的深度模型。同时 为了对所学匹配结构进行可视化 给出了从实际数据中抽取的两个文本的匹配路径。本文的贡献可以概括为 递归地构建语义匹配机制的思想，即递归匹配结构。 提出了一种新的深层架构，即，来对递归匹配结构进行建模。 实验结果表明，与现有的深度模型相比，可以显着提高语义匹配的性能。 与之间关系的揭示，即〜可以在完全匹配的场景中再现的匹配路径。相关工作现有的用于语义匹配的深度学习方法可以分成两组。一个范例着重于将每个文本表示为密集向量，然后根据这两个向量之间的相似度计算匹配分数。例如，〜  使用多层全连接神经网络将查询（或文档）编码为矢量。和采用卷积神经网络（），而采用长时间短的递归神经网络长期记忆（）单位更好地代表一个句子。与上述工作不同的是，使用神经张量网络来模拟两个句子之间的相互作用，而不是使用余弦函数。通过这种方式，它可以捕获更复杂的匹配关系。有些方法甚至尝试将两个句子与多个表示进行匹配，例如单词，短语和句子级别表示。例子包括，，和。一般而言，这种方法背后的想法与用户的经验是一致的，即一旦两句话的含义被很好地捕捉，就可以确定两句之间的匹配程度。然而，这些方法通常很难模拟两个文本之间复杂的相互作用关系，特别是当它们已经被表示为一个紧凑的向量。另一个范式转向直接模拟两个文本的交互关系。具体而言，交互被表示为密集向量，然后通过整合这种交互来产生匹配分数。这种范式的大多数现有工作都创建了一个层次匹配结构，即〜两个文本之间的全局交互是通过分层合成本地交互来生成的。例如，将两个文本之间全局交互的生成模型化为基于主题层次结构的本地交互。 使用将全局交互的生成模型化为单词级别和短语级别交互的抽象。由于分层匹配结构通常依赖于组合的固定窗口大小，所以在这种模型中不能很好地捕获局部交互之间的长距离依赖关系，因此分层定义匹配结构具有局限性。循环匹配结构在所有现有的方法中，语义匹配的机制复杂且难以解释。在数学和计算机科学中，当面对一个复杂的对象时，简化的一种常见方法是将问题分成同类型的子问题，并试图递归地解决问题。 这是众所周知的递归思想。 在本文中，我们建议递归地解决语义匹配问题。在本节中，我们介绍一种新的深层架构，即，以对递归匹配结构进行建模。 如图所示，由三部分组成：（）一个神经张量网络来捕捉单词级别的相互作用 （）应用于单词相互作用张量的空间以获得全局交互 （）获得最终匹配分数的线性评分函数。神经张量网络在中，首先利用神经张量网络来捕捉两个文本之间的基本交互，即词级交互。具体而言，每个单词首先被表示为分布式向量。 给定任意两个单词  和  ，以及它们的向量 （）和 （），它们之间的交互可以表示为一个向量：其中   ，   ，， 是张量参数的一个片段，  和    是线性部分的参数。   是一个非线性函数，本文使用整流器 （）  （，）。交互也可以表示为相似性分数，如余弦。 我们在这里采用神经张量网络，因为它可以捕捉更复杂的相互作用。模型           空间的第二步是将空间应用于词级交互张量。  ，也被称为二维（），是多维的特例。 根据空间，给定前缀的交互表示： ，  和 表示为因此，我们可以看到，空间可以自然地对方程式（  ：）中定义的递归匹配结构进行建模。对于函数  ，我们有不同的选择。基本通常使用非线性全连接层作为  。这种类型的函数易于计算，但经常会遇到渐变消失和爆炸问题〜  ：    。因此，已经提出了的许多变体，诸如长期短期记忆（），门控重复单元（）和网格。在这里，我们采用，因为它很容易实现，并且与有着密切的关系，这将在下面的章节中讨论。被提议利用几个门来解决上述的基本问题，并且已经在诸如机器翻译等任务中表现出优异的性能。在本文中，我们将序列（）的传统扩展到空间。对于，给定一个句子  （，，，），其中    表示嵌入  个词，位置  ，即    ，可以计算如下：                  其中     表示 的位置和  是参数，   是更新门，它试图控制是将旧信息传播到新状态还是写新 生成的信息到状态，   是重置门，当产生新的候选隐藏状态时，它试图重置存储在单元中的信息。当扩展到空间时，对于给定位置（，），即〜（    ，），（，    ）和 （    ，    ），因此我们将有四个更新门   ，记为    ，   ，   和    以及三个复位门   ，记为  。 函数  计算如下。                              线性打分函数由于空间是从左上角到右下角扫描输入的递归模型，因此我们可以在右下角获得最后一个表示为     。      反映了两个文本之间的全局交互。 最终的匹配分数可以用线性函数获得：其中  和 代表参数。优化对于不同的任务，我们需要利用不同的损失函数来训练我们的模型。以回归为例，我们可以使用平方损失进行优化： 其中  是指示 和 之间匹配程度的实值地面真值标签对于排序问题，我们可以利用转折点损失等成对排序损失进行训练。 给定一个三元（，  ，   ），其中（，  ）的匹配度高于（，   ），损失函数定义为：       其中， 和  是匹配一致性打分。通过反向传播和随机梯度下降联合训练模型的所有参数，包括词嵌入参数，神经张量网络，空间。 具体来说，我们在训练过程中的所有参数上使用。讨论在本节中，我们将展示与众所周知的最长公共子序列（）问题之间的关系。理论分析最长公共子序列问题的目标是找到一组序列中所有序列共有的最长子序列（通常只有两个序列）。 在诸如检测的许多应用中，最长公共子序列的长度被用于定义两个序列之间的匹配程度。 ％这个问题在多项式时间内可以通过动态规划解决，因为它具有最优的子结构。形式上来说，给定两个序列，如：和 使  代表的是  的最长公共子序列长度。 和的最长公共子序列长度通过下述的循环过程获得。每一步 由四个因素决定：  ，以及 和 是否一样。 其中，是一个指示符函数，当，函数为，否则为。 或 时，。与有很强的连接。 为了表明这一点，我们首先退化来模拟精确匹配问题，用一个简单的指标函数代替神经张量网络，如果两个词完全相同则返回，否则返回，即     。空间单元的尺寸也被设置为空间的复位门被禁用，因为的长度根据所有过去的历史累积。 因此，等式（）可以退化为     模拟结果我们进行了一个模拟实验来验证上面显示的分析结果。 该数据集由许多随机抽样序列对构成，每个序列由从词汇           中抽样的字符组成。 首先，对每个序列对进行的动态规划算法，将的归一化长度设置为每个序列对的匹配程度。 为了仿真，我们将数据分成训练（对）和测试集（对），并训练带有回归损失的。 两个序列   ，，，，  和   ，，，，  的仿真结果如图所示。（）显示了的结果，其中每个位置的得分（，）代表  ， ，灰色路径指示通过回溯动态编程过程获得两个序列之间的。 （）给出了的结果，其中每个位置处的分数（，）代表表示      （请请注意，为了简化，      的维度被设置为  ）。我们可以看到产生的分数与获得的分数相同，这揭示了和之间的关系。图（）中的灰色路径显示了本地交互如何合成全局交互的主要途径，是通过回溯门产生的。图（）显示了路径生成过程，其中每个位置的三个值代表三个门，例如   ，  ， 位置处为 。考虑到最后位置（），匹配信号从具有最大门值的方向（即〜  ）传递过来，因此，我们移动到位置（）。在位置（），门的最大值是    ，因此，我们应该移动到位置（）。我们可以看到引起的路径与动态编程的路径相同。该分析给出了如何解决语义匹配问题的机制。实验我们对问答（）和论文引用（）的任务进行了实验，以评估的有效性。数据集收集自解答，社区问答系统，一些用户向系统提出问题，其他用户将提交他们的答案。整个数据集包含（问题，答案）对，每个问题都伴随着最佳答案。我们选择其中问题和他们的最佳答案都长度在到之间的对。之后，数据集包含个（问题，答案）对，它们形成正对。对于每个问题，我们首先使用其最佳答案作为查询，用搜索引擎从整个答案集中检索前个结果。然后我们从它们中随机选择个答案来构造负对。 ％我们将整个数据集与：：比例的训练数据，验证数据和测试数据分开。任务是将两篇论文与引文关系进行匹配。该数据集按照构建。论文摘要信息和引文网络是从商业学术网站​​收集的。％我们使用每张纸的摘要作为匹配的文本。负数对从整个数据集中随机抽样。最后，我们有积极和消极情况。的效果我们比较了和几种现有的深度学习方法，包括，，，，，和。我们还将其与〜  进行了比较，这是一种在信息检索中用于语义匹配的流行且强大的基准。对于，我们还实现了双向版本进行比较，它也从右下到左上扫描词相互作用张量，表示为双匹配。在我们的实验中，我们设置参数和基线如下。在我们的模型和一些基线深度模型中使用的词嵌入全部由  的 初始化。根据前面的练习，在整个问题答案数据集上训练词嵌入，并将维数设置为。的批量大小设置为所有其他可训练参数均以相同比例的均匀分布进行随机初始化，并根据验证集上的性能进行选择。 的初始学习率也通过验证来选择。神经张量网络和空间的维数设为，因为它在   ，和  的设置中获得了最佳验证结果。基线方法的其他参数是通过从原始文件中获取值来设置的。质量保证任务被制定为排名问题。因此，我们使用铰链损失进行优化，如第节所示，并且通过典型的排名测量来评估结果，例如为（表示为）和  （）。 其中  是测试排名列表的数量，   （） 是第个排名列表中的正数句子， （）表示在 排名列表和  是指标函数。任务被制定为二进制分类任务。 因此匹配分数由层使用，交叉熵损失用于训练。我们使用分类准确性（）作为评估指标。           			                			     	      					    	 						    	  	   		  		  	  	  	 	 					   	 				  	   		  				 	 	 	   				   	 	 					    	 				    	     			   		    	   		 				        			 	  	 	 和  任务上的实验结果实验结果列于〜  ：。我们有以下实验结果：（）通过对递归匹配结构进行建模，与所有基线相比可显着提高性能。以质量保证任务为例，与相比，以    计，改进约为美元。与相比，以学习句子表示为主的深度学习方法中最好的一种，其改进约为美元。与使用分层组合结构（即和）的深层模型相比，这些改进至少为  ％。对于任务，也取得了最佳效果，但与任务相比，这些改进较小。这是因为这项任务比较容易，甚至像这样简单的模型都能产生好的结果。从以上分析可以看出，递归匹配结构有助于提高语义匹配的结果。（）两种匹配范式（将文本表示为密集向量并将相互作用关系建模）都有其自身的优势，并且结果具有可比性，例如数据集上两种范式的先前最佳结果分别为  （ ）和  （）。结论在本文中，我们提出了一个递归思想来解决复杂的语义匹配问题。具体而言，提出了一种新的深度学习体系结构，即来对递归匹配结构进行建模。 匹配由三部分组成：获得单词级别交互的神经张量网络，递归地生成全局交互的空间以及输出匹配度的线性评分函数。 我们的分析揭示了与的有趣联系。 最后，我们在语义匹配任务上的实验表明可以显着优于现有的深度学习方法。 此外，我们通过一个真实的例子可视化了发现的递归匹配结构。可视化